1 Как вы можете описать процесс распространения событий в
JavaScript (Event Propagation)? Расскажите о его основных фазах.
Какие есть способы применения знаний о фазах
распространения событий на практике?

Процесс распространения событий обеспечивает перемещение события через DOM. Включает 3 фазы. Фаза погружения (от window), фаза цели (достижение целевого элемента), фаза всплытия (обратно). В целом можно использовать для контроля поведения событий, порядка обработки, упрощения динамического добавления элементов.

2 Расскажите, что такое Promise в JavaScript, как он работает, какие
основные состояния у него бывают? Каким еще способом можно
обработать асинхронный код? Какую роль в асинхронности играет
событийный цикл (Event Loop)?

Промис представляет собой объект результат асинхронной операции. Может находится в трех состояниях: ожидание, выполнено, отклонено. Каждому промису передается исполняемая функция, которая принимает аргументы resolve, reject. Также для обработки асинхронности можно использовать async/await или колбэки. Цикл событий управляет операциями, позволяет не блокировать поток выполнения.


3 Что такое ООП, и какие его ключевые принципы вы могли бы
описать? При объяснении приводите примеры. Максимально
подробно расскажите о том, как ООП реализовано в JavaScript.

ООП - это объектно-ориентированный подход программирования, в котором сущности представляют собой объекты, имеющие собственные свойства и поведение. Ключевые принципы это инкапсуляция (сокрытие внутренних данных), наследование (наследование свойств и методов), полиморфизм (различность поведения). В JS ООП поддерживается использованием классов, прототипного наследования.

4 Опишите максимально детально, как браузер обрабатывает URL,
начиная с момента его ввода в адресную строку и заканчивая
отображением страницы. Какие технологии позволяют ускорить
процесс? Какие проблемы (безопасность, междоменное
взаимодействие) могут возникать в процессе?

Пользователь вводит url в адресной строке; браузер проверяет корректность; определяется протокол, доменное имя; преобразование в IP-адрес; установка tcp или https соединения; отправка запроса на сервер; получение ответа; обработка ответа и рендеринг страницы; выполнение скриптов; отображение страницы пользователю.
Технологии ускорения: кэширование (для использования без повторной загрузки ранее использованных данных), service worker.
Возможные проблемы: подмена IP-адресов, вредоносный код, перехват трафика; ограничения на запросы 


